# NOTE: This file is auto-generated, please do not modify

from ..packet import *


class ACI_GAP_LIMITED_DISCOVERABLE_EVENT(VendorEventPacket):
    """
    This event is generated by the controller when the limited discoverable mode ends due to
    timeout. The timeout is 180 seconds.
    """

    SUBCODE = 0x0400


class ACI_GAP_PAIRING_COMPLETE_EVENT(VendorEventPacket):
    """
    This event is generated when the pairing process has completed successfully or a pairing
    procedure timeout has occurred or the pairing has failed. This is to notify the application that
    we have paired with a remote device so that it can take further actions or to notify that a
    timeout has occurred so that the upper layer can decide to disconnect the link.
    """

    SUBCODE = 0x0401

    Connection_Handle = Parameter(order=1, size=2)
    """
    Connection handle on which the pairing procedure completed
    """

    Status_Choices = {
        0x00: "Success",
        0x01: "Timeout",
        0x02: "Pairing Failed",
        0x03: "Encryption failed, LTK missing on local device",
        0x04: "Encryption failed, LTK missing on peer device",
        0x05: "Encryption not supported by remote device",
    }
    Status = Parameter(order=2, size=1, choices=Status_Choices)
    """
    Pairing status. If 0x02, see Reason code.
    """

    Reason_Choices = {
        0x00: "N/A",
        0x01: "PASSKEY_ENTRY_FAILED",
        0x02: "OOB_NOT_AVAILABLE",
        0x03: "AUTH_REQ_CANNOT_BE_MET",
        0x04: "CONFIRM_VALUE_FAILED",
        0x05: "PAIRING_NOT_SUPPORTED",
        0x06: "INSUFF_ENCRYPTION_KEY_SIZE",
        0x07: "CMD_NOT_SUPPORTED",
        0x08: "UNSPECIFIED_REASON",
        0x09: "VERY_EARLY_NEXT_ATTEMPT",
        0x0A: "SM_INVALID_PARAMS",
        0x0B: "SMP_SC_DHKEY_CHECK_FAILED",
        0x0C: "SMP_SC_NUMCOMPARISON_FAILED",
    }
    Reason = Parameter(order=3, size=1, choices=Reason_Choices)
    """
    Pairing reason error code. Valid if Status is 0x02.
    """


class ACI_GAP_PASS_KEY_REQ_EVENT(VendorEventPacket):
    """
    This event is generated by the Security manager to the application when a passkey is
    required for pairing. When this event is received, the application has to respond with the
    ACI_GAP_PASS_KEY_RESP command.
    """

    SUBCODE = 0x0402

    Connection_Handle = Parameter(order=1, size=2)
    """
    Connection handle for which the passkey has been requested.
    """


class ACI_GAP_AUTHORIZATION_REQ_EVENT(VendorEventPacket):
    """
    This event is generated by the Security manager to the application when the application has
    set that authorization is required for reading/writing of attributes. This event will be
    generated as soon as the pairing is complete. When this event is received,
    ACI_GAP_AUTHORIZATION_RESP command should be used to respond by the application.
    """

    SUBCODE = 0x0403

    Connection_Handle = Parameter(order=1, size=2)
    """
    Connection handle for which authorization has been requested.
    """


class ACI_GAP_SLAVE_SECURITY_INITIATED_EVENT(VendorEventPacket):
    """
    This event is generated when the slave security request is successfully sent to the master.
    """

    SUBCODE = 0x0404


class ACI_GAP_BOND_LOST_EVENT(VendorEventPacket):
    """
    This event is generated on the slave when a ACI_GAP_SLAVE_SECURITY_REQUEST is called to reestablish the bond
    with a master but the master has lost the bond. When this event is received, the upper layer has to issue the
    ACI_GAP_ALLOW_REBOND command in order to allow the slave to continue the pairing process with the master.
    On the master this event is raised when ACI_GAP_SEND_PAIRING_REQUEST is called to reestablish a bond with a slave
    but the slave has lost the bond. In order to create a new bond the master has to launch ACI_GAP_SEND_PAIRING_REQUEST
    with force_rebond set to 1.
    """

    SUBCODE = 0x0405


class ACI_GAP_PROC_COMPLETE_EVENT(VendorEventPacket):
    """
    This event is sent by the GAP to the upper layers when a procedure previously started has
    been terminated by the upper layer or has completed for any other reason
    """

    SUBCODE = 0x0407

    Procedure_Code_Choices = {
        0x01: "GAP_LIMITED_DISCOVERY_PROC_BIT",
        0x02: "GAP_GENERAL_DISCOVERY_PROC_BIT",
        0x04: "GAP_NAME_DISCOVERY_PROC_BIT",
        0x08: "GAP_AUTO_CONNECTION_ESTABLISHMENT_PROC_BIT",
        0x10: "GAP_GENERAL_CONNECTION_ESTABLISHMENT_PROC_BIT",
        0x20: "GAP_SELECTIVE_CONNECTION_ESTABLISHMENT_PROC_BIT",
        0x40: "GAP_DIRECT_CONNECTION_ESTABLISHMENT_PROC_BIT",
        0x80: "GAP_OBSERVATION_PROC_BIT",
    }
    Procedure_Code = Parameter(order=1, size=1, choices=Procedure_Code_Choices)
    """
    Terminated procedure.
    """

    Status = Parameter(order=2, size=1)
    """
    For standard error codes see Bluetooth specification, Vol. 2, part D. For proprietary error code refer to Error codes section
    """

    Data_Length = Parameter(order=3, size=1)
    """
    Length of Data in octets
    """

    Data = Parameter(order=4, size=Data_Length)
    """
    Procedure Specific Data:
        - For Name Discovery Procedure: the name of the peer device if the procedure completed successfully.
    """


class ACI_GAP_ADDR_NOT_RESOLVED_EVENT(VendorEventPacket):
    """
    This event is sent only by a privacy enabled Peripheral. The event is sent to the
    upper layers when the peripheral is unsuccessful in resolving the resolvable
    address of the peer device after connecting to it.
    """

    SUBCODE = 0x0408

    Connection_Handle = Parameter(order=1, size=2)
    """
    Connection handle for which the private address could not be
        resolved with any of the stored IRK's.
    """


class ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT(VendorEventPacket):
    """
    This event is sent only during SC v.4.2 Pairing, when Numeric Comparison Association model is selected, in order to show the Numeric Value generated, and to ask for Confirmation to the User. When this event is received, the application has to respond with the 
    ACI_GAP_NUMERIC_COMPARISON_VALUE_CONFIRM_YESNO command
    """

    SUBCODE = 0x0409

    Connection_Handle = Parameter(order=1, size=2)
    """
    Connection handle related to the underlying Pairing
    """

    Numeric_Value = Parameter(order=2, size=4)
    """
    N/A
    """


class ACI_GAP_KEYPRESS_NOTIFICATION_EVENT(VendorEventPacket):
    """
    This event is sent only during SC v.4.2 Pairing, when Keypress Notifications are supported, in order to show the input type signalled by the peer device, having Keyboard only I/O capabilities. When this event is received, no action is required to the User.
    """

    SUBCODE = 0x040A

    Connection_Handle = Parameter(order=1, size=2)
    """
    Connection handle related to the underlying Pairing
    """

    Notification_Type_Choices = {
        0x00: "PASSKEY_ENTRY_STARTED",
        0x01: "PASSKEY_DIGIT_ENTERED",
        0x02: "PASSKEY_DIGIT_ERASED",
        0x03: "PASSKEY_CLEARED",
        0x04: "PASSKEY_ENTRY_COMPLETED",
    }
    Notification_Type = Parameter(order=2, size=1, choices=Notification_Type_Choices)
    """
    Type of Keypress input notified/signaled by peer device
    """

